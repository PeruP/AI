from collections import defaultdict
class DFS:
    def __init__(self):
        self.graph = defaultdict(list)
    def joinLink(self,v1,v2):
        self.graph[v1].append(v2)
        self.graph[v2].append(v1)
    def DFSUtil(self, v, visited):
        visited.add(v)
        print(v, end=" ")
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFSUtil(neighbour, visited)
    def DFSTraversal(self, source):
        visited = set()
        self.DFSUtil(source,visited)
if __name__ == "__main__":
    nasar = DFS()
    vertex=int(input("Enter no of vertices:"))
    edge=int(input("Enter no of edges:"))
    for i in range(edge):
        v1=int(input("Enter the vertex 1: "))
        v2=int(input("Enter the vertex 2: "))
        nasar.joinLink(v1,v2)
    source=int(input("Enter the source vertex: "))
    print("Depth First Traversal:")
    nasar.DFSTraversal(source)